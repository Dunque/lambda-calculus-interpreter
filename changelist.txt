[*] -> obligatorio

1.1 [*] [HECHO] añadir un separador ;; por ejeplo. tocar el analizador sintático y léxico
también se puede manipular en el main. Con hacer el multilínea es suficiente.

    (*Simple function that uses regex to check if a string contains any given expression.
    In our case, we will only use this to check if a string contains the stop character ;*)
    let has_char str c =
    try match (Str.search_forward (Str.regexp c) str 0) with _-> true  
        with Not_found -> false
    ;;

    (*This function reads the console input, concatenating each line (string) it reads with
    a space in between each, and it only stops when it finds a ;. The remaining input to the
    right of the ; gets ignored.*)
    let read_input () =
    let rec aux acc =
        let line = read_line () in
        if (has_char line ";") then 
        let split_line = (hd (split_on_char ';' line)) in 
            cat acc (cat " " split_line)
        else 
        aux (cat acc (cat " " line))
    in aux ""
    ;;

1.2 [HECHO] se aplica lo mismo que de arriba. solucion rapida y sencilla. se puede redireccionar la entrada estándar.
que pare nada más pete, para no perder tiempo. Para usarlo se hace ./top archivo

    (*This function reads the file that we input in the command line, and does essentialy the same as
    read_input. The only difference is that this one reads from the input channel of a file, and also
    it returns a tuple, containing both the desired input string and the number of the line where
    it started to read the sentence that contains the error.*)
    let read_input_from_file in_channel numLine =
    let rec aux acc lineNum =
        let line = input_line in_channel in
        if (has_char line ";") then 
        let split_line = (hd (split_on_char ';' line)) in 
            ((cat acc (cat " " split_line)),lineNum+1)
        else 
        aux (cat acc (cat " " line)) (lineNum+1)
    in aux "" numLine
    ;;

    (*This loop is used to read the contents of the file. Its changed so it stops when it reads a whole
    sentence (finishing with a ';') and also displays the line where the error was found*)
    let file_loop () = 
    let in_channel = open_in Sys.argv.(1) in
    try
        while true do
        let rec loop ctx numLine =
            try
            let inp = read_input_from_file in_channel numLine in
            let tm = s token (from_string (fst inp)) in
            let tyTm = typeof ctx tm in
            print_endline (string_of_term (eval tm) ^ " : " ^ string_of_ty tyTm);
            loop ctx (snd inp)
            with
            Lexical_error ->
                print_endline ("lexical error in line: " ^ string_of_int numLine);
                exit 0;
            | Parse_error ->
                print_endline ("syntax error in line: " ^ string_of_int numLine);
                exit 0;
            | Type_error e ->
                print_endline ("type error: " ^ e ^ " in line: " ^ string_of_int numLine);
                exit 0;
        in
            loop emptyctx 1
        done
    with End_of_file ->
        close_in in_channel
    ;;
    ;;

1.3 minimizar paréntesis. estudiar la gramática, hacer cascadas de funciones que se 
llaman unas a otras, van entrando en la estructura del término y segun dodne estén 
deciden si es necesario paréntesis o no

2.1 modo debug, activable con un comando o una opción. dentro de la iteracion de eval, 
antes de volver a llamar, printeas lo que te dio

2.2 cambia los nombres por números. hay que guardar un mapa o una lista de los nombres originales de las 
varaiables, para que traduzca de vuelta al final

3.1 [*] [HECHO] a parte de la recursividad, podemos hacer definiciones recursivas directas con esa sintaxis

    term
        | TmFix of term

    typeof
            (* E-FixBeta *)
        | TmFix (TmAbs (x, _, t12)) ->
            subst x tm t12

            (* E-Fix *)
        | TmFix t1 ->
            let t1' = eval1 t1 in
            TmFix t1'

    string_of_term
        | TmFix t ->
            "(fix " ^ string_of_term t ^ ")"

    free_vars
        | TmFix t ->
            free_vars t

    subst
        | TmFix t ->
            TmFix (subst x s t)

    eval1
            (* E-FixBeta *)
        | TmFix (TmAbs (x, _, t12)) ->
            subst x tm t12

            (* E-Fix *)
        | TmFix t1 ->
            let t1' = eval1 t1 in
            TmFix t1'
        

3.2 [*] elegir si se pueden squashear tipos o si no se puede hacer. si hacemos x = 5
luego no podemos hacer x = true. elegimos si si o si no se puede hacer.

    Our first approach was to change the eval function to carry the context, and also to return it in case it updates it. But this
    method was too cumbersome, so we decided to scrap it and rethink for a bit. After a while, we decided to introduce a new type to the parser,
    called command, so we changed the starting symbol and the first sentence to:

    %type <Lambda.command> s

    s:
    STRINGV EQ term EOF
        { Bind ($1, $3) }
    | term EOF
        { Eval $1 }

    This ties into the new function that we use in our main file. In there, we match the type of command that the parser reads, as we now differeneciate
    between regular type expressions, and binding expressions. For example: x = 5 is a binding command, and succ (succ (succ 0)) is a regular type expression.
    We also changed the context type to (string * (term * ty)) list, as we now require it to store the name of the binding, the term that it stores and its type.
    That also changes the getbinding and addbinding functions, that now require a term. Now getbinding returns a pair of (term * ty), so in order to access the
    desired information, we make use of the fst and snd functions.
    The eval function now needs the context, but it only makes use of it if the term is a TmVar, in which case it returns the term contained in the contexts that
    matches the identifier string.

    But this doesn't solve the problem of the variable squashing. For example, if we input 
    x = 5;
    id = L y:Nat.x;
    the result we get is a syntax error, when it should be interpreted as id = L y:Nat.5;

    So in order to fix this problem, we have to introduce a new function at the end of eval, changing NoRuleApplies -> tm to NoRuleApplies -> apply_ctx ctx tm,
    where apply_ctx evaluates again the term tm, in order to find out if there are any sustitutions that can be made from bindings present in the context.
    So now, when we do
    x = 5;
    id = L y:Nat.x;
    it returns 
    - : (Nat) -> (Nat) = (lambda y:Nat. 5)
    showing us that it made the sustitution correctly. Now we can input 
    id x;
    and it returns 5.


3.3 [*] [HECHO] nuevo tipo string

    creado como tipo base ty y a mayores añadida la operación de concat como TmConcat

3.4 [*] incorporar pares, el constructor es la , y los ponemos entre {first,second}

    ya funciona, pero hay que preguntar si hay qeu hacer todas las operaciones qeu aparecen en
    la hoja de reglas. Para hacer first y second se usa { , }.1 y .2

3.5 se pueden hacer lpos pares en base a los registros, pero ni idea sinceramente. pueden ser distintos tipos

3.6 tienen que ser del mismo tipo los elementos

3.7 subtipado. bastante chungo, pero más facil qeu el pretty printer y el de brujin

4.1 [*] la memoria: solo hay que documentar lo nuevo que hagamos, un parrafo sirve, algun ejemplo.
no más de 3,4 páginas. El manual técnico se puede sustituír por comentarios en el código.