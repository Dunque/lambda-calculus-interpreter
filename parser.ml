type token =
  | LAMBDA
  | TRUE
  | FALSE
  | IF
  | THEN
  | ELSE
  | SUCC
  | PRED
  | ISZERO
  | LET
  | LETREC
  | IN
  | BOOL
  | NAT
  | CONCAT
  | QUOTE
  | LPAREN
  | RPAREN
  | DOT
  | EQ
  | COLON
  | ARROW
  | EOF
  | COMMA
  | LCURL
  | RCURL
  | LSQR
  | RSQR
  | HEAD
  | TAIL
  | ISEMPTY
  | FIRST
  | SECOND
  | INTV of (int)
  | STRINGV of (string)

open Parsing;;
let _ = parse_error;;
# 3 "parser.mly"
  open Lambda;;
# 43 "parser.ml"
let yytransl_const = [|
  257 (* LAMBDA *);
  258 (* TRUE *);
  259 (* FALSE *);
  260 (* IF *);
  261 (* THEN *);
  262 (* ELSE *);
  263 (* SUCC *);
  264 (* PRED *);
  265 (* ISZERO *);
  266 (* LET *);
  267 (* LETREC *);
  268 (* IN *);
  269 (* BOOL *);
  270 (* NAT *);
  271 (* CONCAT *);
  272 (* QUOTE *);
  273 (* LPAREN *);
  274 (* RPAREN *);
  275 (* DOT *);
  276 (* EQ *);
  277 (* COLON *);
  278 (* ARROW *);
    0 (* EOF *);
  279 (* COMMA *);
  280 (* LCURL *);
  281 (* RCURL *);
  282 (* LSQR *);
  283 (* RSQR *);
  284 (* HEAD *);
  285 (* TAIL *);
  286 (* ISEMPTY *);
  287 (* FIRST *);
  288 (* SECOND *);
    0|]

let yytransl_block = [|
  289 (* INTV *);
  290 (* STRINGV *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\002\000\002\000\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\007\000\006\000\
\006\000\008\000\008\000\004\000\004\000\009\000\009\000\009\000\
\009\000\000\000"

let yylen = "\002\000\
\004\000\002\000\001\000\006\000\006\000\006\000\008\000\003\000\
\001\000\002\000\002\000\002\000\002\000\003\000\003\000\001\000\
\001\000\001\000\001\000\003\000\003\000\001\000\003\000\002\000\
\002\000\002\000\003\000\002\000\002\000\002\000\005\000\003\000\
\005\000\001\000\003\000\001\000\003\000\003\000\001\000\001\000\
\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\016\000\017\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\019\000\000\000\042\000\000\000\000\000\
\000\000\022\000\000\000\018\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\
\002\000\000\000\000\000\025\000\026\000\000\000\000\000\000\000\
\000\000\008\000\000\000\000\000\000\000\020\000\015\000\000\000\
\000\000\021\000\000\000\023\000\000\000\027\000\039\000\040\000\
\000\000\041\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\035\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\031\000\038\000\005\000\037\000\004\000\
\006\000\000\000\000\000\033\000\000\000\007\000"

let yydgoto = "\002\000\
\022\000\043\000\024\000\075\000\025\000\041\000\026\000\044\000\
\076\000"

let yysindex = "\003\000\
\139\255\000\000\228\254\000\000\000\000\173\255\115\001\115\001\
\115\001\234\254\239\254\173\255\244\254\173\255\207\255\105\255\
\115\001\115\001\115\001\000\000\254\254\000\000\027\000\115\001\
\240\254\000\000\012\255\000\000\027\255\240\254\240\254\240\254\
\018\255\019\255\173\255\050\255\023\255\024\255\026\255\020\255\
\031\255\000\000\037\255\034\255\240\254\240\254\240\254\173\255\
\000\000\240\254\028\255\000\000\000\000\011\255\173\255\173\255\
\011\255\000\000\050\255\115\001\240\254\000\000\000\000\173\255\
\173\255\000\000\173\255\000\000\068\000\000\000\000\000\000\000\
\011\255\000\000\052\255\051\255\069\255\065\255\061\255\050\255\
\059\255\066\255\000\000\000\000\068\255\173\255\011\255\173\255\
\173\255\173\255\056\255\000\000\000\000\000\000\000\000\000\000\
\000\000\081\255\026\255\000\000\173\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\020\001\000\000\000\000\054\001\
\001\000\000\000\000\000\000\000\000\000\035\000\069\000\103\000\
\000\000\000\000\000\000\040\255\000\000\000\000\096\001\000\000\
\000\000\000\000\067\255\000\000\137\000\171\000\205\000\000\000\
\000\000\239\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\082\001\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\246\254\000\000\000\000\000\000\000\000\
\070\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\255\255\246\255\206\255\012\000\005\000\000\000\030\000\
\000\000"

let yytablesize = 661
let yytable = "\023\000\
\009\000\036\000\051\000\001\000\029\000\027\000\079\000\036\000\
\036\000\036\000\035\000\033\000\038\000\040\000\052\000\053\000\
\034\000\048\000\030\000\031\000\032\000\037\000\085\000\071\000\
\072\000\060\000\049\000\073\000\045\000\046\000\047\000\055\000\
\054\000\058\000\010\000\050\000\095\000\056\000\062\000\057\000\
\003\000\063\000\065\000\003\000\074\000\064\000\069\000\061\000\
\080\000\003\000\003\000\004\000\005\000\077\000\078\000\066\000\
\007\000\008\000\009\000\067\000\068\000\070\000\081\000\082\000\
\059\000\013\000\014\000\084\000\011\000\060\000\086\000\050\000\
\087\000\015\000\088\000\016\000\089\000\017\000\018\000\019\000\
\090\000\091\000\020\000\028\000\094\000\093\000\096\000\097\000\
\098\000\099\000\092\000\061\000\101\000\034\000\032\000\100\000\
\083\000\000\000\000\000\102\000\000\000\000\000\012\000\000\000\
\000\000\003\000\004\000\005\000\006\000\000\000\000\000\007\000\
\008\000\009\000\010\000\011\000\000\000\000\000\000\000\012\000\
\013\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\
\015\000\000\000\016\000\042\000\017\000\018\000\019\000\000\000\
\028\000\020\000\028\000\003\000\004\000\005\000\006\000\000\000\
\000\000\007\000\008\000\009\000\010\000\011\000\000\000\000\000\
\000\000\012\000\013\000\014\000\000\000\000\000\000\000\000\000\
\000\000\000\000\015\000\000\000\016\000\000\000\017\000\018\000\
\019\000\000\000\029\000\020\000\021\000\003\000\004\000\005\000\
\006\000\000\000\000\000\007\000\008\000\009\000\010\000\011\000\
\000\000\000\000\000\000\012\000\013\000\014\000\000\000\000\000\
\000\000\000\000\000\000\000\000\015\000\000\000\016\000\000\000\
\017\000\018\000\019\000\000\000\030\000\020\000\028\000\003\000\
\004\000\005\000\006\000\000\000\000\000\007\000\008\000\009\000\
\010\000\011\000\000\000\000\000\000\000\012\000\013\000\014\000\
\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\
\016\000\000\000\017\000\018\000\019\000\000\000\013\000\020\000\
\039\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\000\000\000\000\009\000\
\009\000\009\000\009\000\018\000\000\000\000\000\000\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\000\000\
\000\000\009\000\009\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\000\000\
\000\000\010\000\010\000\010\000\010\000\003\000\000\000\000\000\
\000\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\000\000\000\000\010\000\010\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\014\000\000\000\011\000\011\000\011\000\011\000\000\000\
\000\000\000\000\000\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\000\000\000\000\011\000\011\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\000\000\000\000\012\000\012\000\012\000\
\012\000\000\000\000\000\000\000\000\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\000\000\000\000\012\000\
\012\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\000\000\000\000\028\000\
\028\000\028\000\028\000\000\000\000\000\000\000\000\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\000\000\
\000\000\028\000\028\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\000\000\
\000\000\029\000\029\000\029\000\029\000\000\000\000\000\000\000\
\000\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\000\000\000\000\029\000\029\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\000\000\000\000\030\000\030\000\030\000\030\000\000\000\
\000\000\000\000\000\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\000\000\000\000\030\000\030\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\000\000\000\000\013\000\013\000\013\000\
\013\000\000\000\000\000\000\000\000\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\000\000\000\000\013\000\
\013\000\000\000\000\000\000\000\000\000\018\000\018\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\018\000\018\000\000\000\018\000\000\000\
\000\000\000\000\000\000\018\000\000\000\018\000\000\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\003\000\000\000\
\000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\000\000\000\000\003\000\000\000\000\000\003\000\
\000\000\000\000\000\000\000\000\003\000\000\000\003\000\000\000\
\003\000\000\000\014\000\000\000\000\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\000\000\000\000\
\014\000\018\000\018\000\014\000\000\000\000\000\000\000\000\000\
\014\000\000\000\014\000\000\000\014\000\000\000\000\000\018\000\
\018\000\000\000\018\000\000\000\004\000\005\000\018\000\018\000\
\000\000\018\000\000\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\013\000\014\000\000\000\000\000\000\000\000\000\
\000\000\000\000\015\000\000\000\016\000\000\000\017\000\018\000\
\019\000\000\000\000\000\020\000\028\000"

let yycheck = "\001\000\
\000\000\012\000\019\001\001\000\006\000\034\001\057\000\018\001\
\019\001\020\001\012\000\034\001\014\000\015\000\031\001\032\001\
\034\001\020\001\007\000\008\000\009\000\034\001\073\000\013\001\
\014\001\036\000\000\000\017\001\017\000\018\000\019\000\005\001\
\021\001\035\000\000\000\024\000\087\000\020\001\016\001\021\001\
\001\001\018\001\023\001\004\001\034\001\020\001\048\000\036\000\
\059\000\010\001\011\001\002\001\003\001\055\000\056\000\025\001\
\007\001\008\001\009\001\023\001\027\001\034\001\064\000\065\000\
\015\001\016\001\017\001\000\000\000\000\080\000\019\001\060\000\
\022\001\024\001\006\001\026\001\012\001\028\001\029\001\030\001\
\020\001\023\001\033\001\034\001\086\000\018\001\088\000\089\000\
\090\000\034\001\025\001\080\000\012\001\027\001\025\001\091\000\
\067\000\255\255\255\255\101\000\255\255\255\255\000\000\255\255\
\255\255\001\001\002\001\003\001\004\001\255\255\255\255\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\255\255\015\001\
\016\001\017\001\255\255\255\255\255\255\255\255\255\255\255\255\
\024\001\255\255\026\001\027\001\028\001\029\001\030\001\255\255\
\000\000\033\001\034\001\001\001\002\001\003\001\004\001\255\255\
\255\255\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\255\255\015\001\016\001\017\001\255\255\255\255\255\255\255\255\
\255\255\255\255\024\001\255\255\026\001\255\255\028\001\029\001\
\030\001\255\255\000\000\033\001\034\001\001\001\002\001\003\001\
\004\001\255\255\255\255\007\001\008\001\009\001\010\001\011\001\
\255\255\255\255\255\255\015\001\016\001\017\001\255\255\255\255\
\255\255\255\255\255\255\255\255\024\001\255\255\026\001\255\255\
\028\001\029\001\030\001\255\255\000\000\033\001\034\001\001\001\
\002\001\003\001\004\001\255\255\255\255\007\001\008\001\009\001\
\010\001\011\001\255\255\255\255\255\255\015\001\016\001\017\001\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\255\255\
\026\001\255\255\028\001\029\001\030\001\255\255\000\000\033\001\
\034\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\255\255\255\255\015\001\
\016\001\017\001\018\001\000\000\255\255\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\255\255\
\255\255\033\001\034\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\255\255\
\255\255\015\001\016\001\017\001\018\001\000\000\255\255\255\255\
\255\255\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\255\255\255\255\033\001\034\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\000\000\255\255\015\001\016\001\017\001\018\001\255\255\
\255\255\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\255\255\255\255\033\001\034\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\255\255\255\255\015\001\016\001\017\001\
\018\001\255\255\255\255\255\255\255\255\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\255\255\255\255\033\001\
\034\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\255\255\255\255\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\255\255\
\255\255\033\001\034\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\255\255\
\255\255\015\001\016\001\017\001\018\001\255\255\255\255\255\255\
\255\255\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\255\255\255\255\033\001\034\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\255\255\255\255\015\001\016\001\017\001\018\001\255\255\
\255\255\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\255\255\255\255\033\001\034\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\255\255\255\255\015\001\016\001\017\001\
\018\001\255\255\255\255\255\255\255\255\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\255\255\255\255\033\001\
\034\001\255\255\255\255\255\255\255\255\002\001\003\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\016\001\017\001\255\255\019\001\255\255\
\255\255\255\255\255\255\024\001\255\255\026\001\255\255\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\001\001\255\255\
\255\255\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\255\255\255\255\015\001\255\255\255\255\018\001\
\255\255\255\255\255\255\255\255\023\001\255\255\025\001\255\255\
\027\001\255\255\001\001\255\255\255\255\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\255\255\255\255\
\015\001\002\001\003\001\018\001\255\255\255\255\255\255\255\255\
\023\001\255\255\025\001\255\255\027\001\255\255\255\255\016\001\
\017\001\255\255\019\001\255\255\002\001\003\001\023\001\024\001\
\255\255\026\001\255\255\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\016\001\017\001\255\255\255\255\255\255\255\255\
\255\255\255\255\024\001\255\255\026\001\255\255\028\001\029\001\
\030\001\255\255\255\255\033\001\034\001"

let yynames_const = "\
  LAMBDA\000\
  TRUE\000\
  FALSE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  LET\000\
  LETREC\000\
  IN\000\
  BOOL\000\
  NAT\000\
  CONCAT\000\
  QUOTE\000\
  LPAREN\000\
  RPAREN\000\
  DOT\000\
  EQ\000\
  COLON\000\
  ARROW\000\
  EOF\000\
  COMMA\000\
  LCURL\000\
  RCURL\000\
  LSQR\000\
  RSQR\000\
  HEAD\000\
  TAIL\000\
  ISEMPTY\000\
  FIRST\000\
  SECOND\000\
  "

let yynames_block = "\
  INTV\000\
  STRINGV\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 51 "parser.mly"
        ( Bind (_1, _3) )
# 374 "parser.ml"
               : Lambda.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 53 "parser.mly"
        ( Eval _1 )
# 381 "parser.ml"
               : Lambda.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'appTerm) in
    Obj.repr(
# 57 "parser.mly"
      ( _1 )
# 388 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 59 "parser.mly"
      ( TmIf (_2, _4, _6) )
# 397 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 61 "parser.mly"
      ( TmAbs (_2, _4, _6) )
# 406 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 63 "parser.mly"
      ( TmLetIn (_2, _4, _6) )
# 415 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'ty) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 65 "parser.mly"
      ( TmLetIn (_2, TmFix ( TmAbs (_2, _4, _6)), _8) )
# 425 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 67 "parser.mly"
      ( TmConcat (_2,_3) )
# 433 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 71 "parser.mly"
      ( _1 )
# 440 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 73 "parser.mly"
      ( TmSucc _2 )
# 447 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 75 "parser.mly"
      ( TmPred _2 )
# 454 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 77 "parser.mly"
      ( TmIsZero _2 )
# 461 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'appTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 79 "parser.mly"
      ( TmApp (_1, _2) )
# 469 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'appTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'appTerm) in
    Obj.repr(
# 81 "parser.mly"
      ( TmConcat (_2,_3) )
# 477 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 85 "parser.mly"
      ( _2 )
# 484 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 87 "parser.mly"
      ( TmTrue )
# 490 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "parser.mly"
      ( TmFalse )
# 496 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 91 "parser.mly"
      ( TmVar _1 )
# 503 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 93 "parser.mly"
      ( let rec f = function
            0 -> TmZero
          | n -> TmSucc (f (n-1))
        in f _1 )
# 513 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 98 "parser.mly"
      ( TmStr _2 )
# 520 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'recordTerm) in
    Obj.repr(
# 100 "parser.mly"
      ( TmRecord _2 )
# 527 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pairTerm) in
    Obj.repr(
# 102 "parser.mly"
      ( _1 )
# 534 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'listTerm) in
    Obj.repr(
# 104 "parser.mly"
      ( TmList _2 )
# 541 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 106 "parser.mly"
      ( TmList [TmEmpty] )
# 547 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'atomicTerm) in
    Obj.repr(
# 108 "parser.mly"
      ( TmFirst _1 )
# 554 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'atomicTerm) in
    Obj.repr(
# 110 "parser.mly"
      ( TmSecond _1 )
# 561 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atomicTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 112 "parser.mly"
      ( TmFindRecord (_1, _3) )
# 569 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 114 "parser.mly"
      ( TmHead _2 )
# 576 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 116 "parser.mly"
      ( TmTail _2 )
# 583 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 118 "parser.mly"
      ( TmIsEmptyList _2 )
# 590 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 123 "parser.mly"
      ( TmPair (_2,_4) )
# 598 "parser.ml"
               : 'pairTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 127 "parser.mly"
      ( [(_1,_3)] )
# 606 "parser.ml"
               : 'recordTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'recordTerm) in
    Obj.repr(
# 129 "parser.mly"
      ( (_1,_3)::_5 )
# 615 "parser.ml"
               : 'recordTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 133 "parser.mly"
      ( [_1] )
# 622 "parser.ml"
               : 'listTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'listTerm) in
    Obj.repr(
# 135 "parser.mly"
      ( _1::_3 )
# 630 "parser.ml"
               : 'listTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTy) in
    Obj.repr(
# 139 "parser.mly"
      ( _1 )
# 637 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atomicTy) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 141 "parser.mly"
      ( TyArr (_1, _3) )
# 645 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 145 "parser.mly"
      ( _2 )
# 652 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 147 "parser.mly"
      ( TyBool )
# 658 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 149 "parser.mly"
      ( TyNat )
# 664 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 151 "parser.mly"
      ( TyStr )
# 671 "parser.ml"
               : 'atomicTy))
(* Entry s *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let s (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Lambda.command)
