type token =
  | LAMBDA
  | TRUE
  | FALSE
  | IF
  | THEN
  | ELSE
  | SUCC
  | PRED
  | ISZERO
  | LET
  | LETREC
  | IN
  | BOOL
  | NAT
  | CONCAT
  | QUOTE
  | LPAREN
  | RPAREN
  | DOT
  | EQ
  | COLON
  | ARROW
  | EOF
  | COMMA
  | LCURL
  | RCURL
  | LIST
  | LSQR
  | RSQR
  | CONST
  | NIL
  | HEAD
  | TAIL
  | ISNIL
  | FIRST
  | SECOND
  | INTV of (int)
  | STRINGV of (string)

open Parsing;;
let _ = parse_error;;
# 3 "parser.mly"
  open Lambda;;
# 46 "parser.ml"
let yytransl_const = [|
  257 (* LAMBDA *);
  258 (* TRUE *);
  259 (* FALSE *);
  260 (* IF *);
  261 (* THEN *);
  262 (* ELSE *);
  263 (* SUCC *);
  264 (* PRED *);
  265 (* ISZERO *);
  266 (* LET *);
  267 (* LETREC *);
  268 (* IN *);
  269 (* BOOL *);
  270 (* NAT *);
  271 (* CONCAT *);
  272 (* QUOTE *);
  273 (* LPAREN *);
  274 (* RPAREN *);
  275 (* DOT *);
  276 (* EQ *);
  277 (* COLON *);
  278 (* ARROW *);
    0 (* EOF *);
  279 (* COMMA *);
  280 (* LCURL *);
  281 (* RCURL *);
  282 (* LIST *);
  283 (* LSQR *);
  284 (* RSQR *);
  285 (* CONST *);
  286 (* NIL *);
  287 (* HEAD *);
  288 (* TAIL *);
  289 (* ISNIL *);
  290 (* FIRST *);
  291 (* SECOND *);
    0|]

let yytransl_block = [|
  292 (* INTV *);
  293 (* STRINGV *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\002\000\002\000\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\007\000\006\000\
\006\000\008\000\008\000\004\000\004\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\010\000\010\000\000\000"

let yylen = "\002\000\
\004\000\002\000\001\000\006\000\006\000\006\000\008\000\003\000\
\001\000\002\000\002\000\002\000\002\000\003\000\003\000\001\000\
\001\000\001\000\001\000\003\000\003\000\001\000\002\000\002\000\
\003\000\006\000\004\000\005\000\005\000\005\000\005\000\003\000\
\005\000\001\000\003\000\001\000\003\000\003\000\001\000\001\000\
\001\000\005\000\003\000\002\000\002\000\003\000\005\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\016\000\017\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\019\000\000\000\048\000\000\000\
\000\000\000\000\022\000\000\000\018\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\002\000\000\000\000\000\023\000\024\000\000\000\000\000\000\000\
\000\000\008\000\000\000\000\000\000\000\020\000\015\000\000\000\
\000\000\021\000\039\000\040\000\000\000\000\000\000\000\000\000\
\041\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\044\000\045\000\000\000\000\000\
\027\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\000\000\031\000\038\000\000\000\000\000\043\000\000\000\
\037\000\000\000\000\000\000\000\005\000\004\000\006\000\000\000\
\000\000\033\000\000\000\000\000\000\000\000\000\000\000\042\000\
\007\000\000\000\047\000"

let yydgoto = "\002\000\
\023\000\024\000\025\000\074\000\026\000\042\000\027\000\000\000\
\075\000\092\000"

let yysindex = "\004\000\
\107\255\000\000\236\254\000\000\000\000\144\255\218\001\218\001\
\218\001\238\254\243\254\144\255\252\254\144\255\181\255\254\254\
\010\255\016\255\017\255\018\255\000\000\026\255\000\000\047\000\
\218\001\244\254\000\000\027\255\000\000\051\255\244\254\244\254\
\244\254\040\255\041\255\144\255\213\255\045\255\047\255\046\255\
\048\255\043\255\050\255\050\255\050\255\050\255\050\255\144\255\
\000\000\244\254\032\255\000\000\000\000\050\255\144\255\144\255\
\050\255\000\000\213\255\218\001\244\254\000\000\000\000\144\255\
\144\255\000\000\000\000\000\000\050\255\072\001\050\255\050\255\
\000\000\042\255\055\255\044\255\054\255\057\255\058\255\073\000\
\000\000\060\255\077\255\076\255\069\255\213\255\078\255\075\255\
\084\255\083\255\081\255\080\255\000\000\000\000\218\001\050\255\
\000\000\218\001\218\001\218\001\000\000\144\255\144\255\144\255\
\144\255\082\255\000\000\000\000\050\255\050\255\000\000\195\001\
\000\000\244\254\244\254\244\254\000\000\000\000\000\000\094\255\
\046\255\000\000\090\255\096\255\244\254\144\255\088\255\000\000\
\000\000\083\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\088\001\000\000\000\000\
\125\001\001\000\000\000\000\000\000\000\000\000\038\000\075\000\
\112\000\000\000\000\000\000\000\030\255\000\000\000\000\159\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\149\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\162\001\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\249\254\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\101\255\000\000\
\000\000\248\254\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\186\000\223\000\014\001\000\000\000\000\000\000\000\000\
\000\000\000\000\102\255\000\000\051\001\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\250\255\254\255\238\255\251\255\022\000\000\000\000\000\
\000\000\002\000"

let yytablesize = 767
let yytable = "\030\000\
\009\000\031\000\032\000\033\000\001\000\036\000\051\000\039\000\
\041\000\037\000\036\000\036\000\036\000\041\000\041\000\036\000\
\028\000\036\000\034\000\050\000\036\000\052\000\053\000\035\000\
\043\000\076\000\077\000\078\000\079\000\058\000\003\000\061\000\
\038\000\003\000\060\000\082\000\044\000\010\000\085\000\003\000\
\003\000\080\000\045\000\046\000\047\000\048\000\049\000\054\000\
\083\000\084\000\089\000\091\000\093\000\094\000\050\000\055\000\
\086\000\087\000\088\000\056\000\062\000\057\000\067\000\068\000\
\063\000\064\000\069\000\066\000\081\000\095\000\065\000\097\000\
\101\000\070\000\011\000\071\000\096\000\113\000\102\000\072\000\
\061\000\098\000\103\000\060\000\099\000\100\000\073\000\104\000\
\105\000\112\000\123\000\124\000\114\000\115\000\116\000\117\000\
\118\000\119\000\120\000\107\000\106\000\108\000\109\000\110\000\
\111\000\126\000\125\000\003\000\004\000\005\000\006\000\012\000\
\127\000\007\000\008\000\009\000\010\000\011\000\121\000\129\000\
\128\000\012\000\013\000\014\000\130\000\032\000\046\000\122\000\
\131\000\000\000\015\000\000\000\000\000\000\000\000\000\016\000\
\017\000\018\000\019\000\020\000\000\000\000\000\021\000\022\000\
\003\000\004\000\005\000\006\000\013\000\000\000\007\000\008\000\
\009\000\010\000\011\000\000\000\000\000\000\000\012\000\013\000\
\014\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\
\000\000\000\000\000\000\000\000\016\000\017\000\018\000\019\000\
\020\000\000\000\000\000\021\000\029\000\003\000\004\000\005\000\
\006\000\028\000\000\000\007\000\008\000\009\000\010\000\011\000\
\000\000\000\000\000\000\012\000\013\000\014\000\000\000\000\000\
\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\
\000\000\016\000\017\000\018\000\019\000\020\000\004\000\005\000\
\021\000\040\000\000\000\007\000\008\000\009\000\029\000\000\000\
\000\000\000\000\000\000\059\000\013\000\014\000\000\000\000\000\
\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\
\000\000\016\000\017\000\018\000\019\000\020\000\000\000\000\000\
\021\000\029\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\030\000\000\000\009\000\
\009\000\009\000\009\000\000\000\000\000\000\000\000\000\009\000\
\009\000\009\000\000\000\000\000\000\000\009\000\009\000\009\000\
\009\000\009\000\000\000\000\000\009\000\009\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\026\000\000\000\010\000\010\000\010\000\010\000\
\000\000\000\000\000\000\000\000\010\000\010\000\010\000\000\000\
\000\000\000\000\010\000\010\000\010\000\010\000\010\000\000\000\
\000\000\010\000\010\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\018\000\
\000\000\011\000\011\000\011\000\011\000\000\000\000\000\000\000\
\000\000\011\000\011\000\011\000\000\000\000\000\000\000\011\000\
\011\000\011\000\011\000\011\000\000\000\000\000\011\000\011\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\003\000\000\000\012\000\012\000\
\012\000\012\000\000\000\000\000\000\000\000\000\012\000\012\000\
\012\000\000\000\000\000\000\000\012\000\012\000\012\000\012\000\
\012\000\000\000\000\000\012\000\012\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\014\000\000\000\013\000\013\000\013\000\013\000\000\000\
\000\000\000\000\000\000\013\000\013\000\013\000\000\000\000\000\
\000\000\013\000\013\000\013\000\013\000\013\000\000\000\000\000\
\013\000\013\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\000\000\000\000\
\028\000\028\000\028\000\028\000\000\000\000\000\000\000\000\000\
\028\000\028\000\028\000\000\000\000\000\000\000\028\000\028\000\
\028\000\028\000\028\000\000\000\000\000\028\000\028\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\000\000\000\000\029\000\029\000\029\000\
\029\000\000\000\000\000\000\000\000\000\029\000\029\000\029\000\
\000\000\000\000\000\000\029\000\029\000\029\000\029\000\029\000\
\000\000\000\000\029\000\029\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\000\000\000\000\030\000\030\000\030\000\030\000\
\000\000\000\000\000\000\000\000\030\000\030\000\030\000\000\000\
\000\000\000\000\030\000\030\000\030\000\030\000\030\000\000\000\
\000\000\030\000\030\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\000\000\
\000\000\026\000\026\000\026\000\026\000\000\000\000\000\000\000\
\000\000\026\000\026\000\026\000\000\000\000\000\000\000\026\000\
\026\000\026\000\026\000\026\000\067\000\068\000\026\000\026\000\
\069\000\018\000\018\000\000\000\000\000\000\000\000\000\070\000\
\000\000\071\000\000\000\000\000\000\000\072\000\000\000\018\000\
\018\000\000\000\018\000\000\000\090\000\000\000\000\000\018\000\
\000\000\000\000\000\000\000\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\003\000\000\000\000\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\000\000\000\000\003\000\000\000\000\000\003\000\000\000\
\000\000\000\000\000\000\003\000\000\000\003\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\018\000\018\000\014\000\000\000\000\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\018\000\018\000\
\014\000\018\000\000\000\014\000\000\000\018\000\018\000\000\000\
\014\000\000\000\014\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\004\000\005\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\013\000\014\000\000\000\051\000\000\000\000\000\
\000\000\000\000\015\000\004\000\005\000\000\000\000\000\016\000\
\017\000\018\000\019\000\020\000\052\000\053\000\021\000\029\000\
\000\000\013\000\014\000\000\000\000\000\000\000\000\000\000\000\
\000\000\015\000\000\000\000\000\000\000\000\000\016\000\017\000\
\018\000\019\000\020\000\000\000\000\000\021\000\029\000"

let yycheck = "\006\000\
\000\000\007\000\008\000\009\000\001\000\012\000\019\001\014\000\
\015\000\012\000\018\001\019\001\020\001\022\001\023\001\023\001\
\037\001\025\001\037\001\025\000\028\001\034\001\035\001\037\001\
\027\001\044\000\045\000\046\000\047\000\036\000\001\001\037\000\
\037\001\004\001\037\000\054\000\027\001\000\000\057\000\010\001\
\011\001\048\000\027\001\027\001\027\001\020\001\000\000\021\001\
\055\000\056\000\069\000\070\000\071\000\072\000\060\000\005\001\
\059\000\064\000\065\000\020\001\016\001\021\001\013\001\014\001\
\018\001\020\001\017\001\025\001\037\001\028\001\023\001\028\001\
\000\000\024\001\000\000\026\001\022\001\096\000\019\001\030\001\
\086\000\028\001\006\001\086\000\028\001\028\001\037\001\012\001\
\020\001\095\000\109\000\110\000\098\000\099\000\100\000\102\000\
\103\000\104\000\105\000\025\001\023\001\018\001\020\001\023\001\
\025\001\012\001\112\000\001\001\002\001\003\001\004\001\000\000\
\023\001\007\001\008\001\009\001\010\001\011\001\037\001\126\000\
\025\001\015\001\016\001\017\001\037\001\025\001\025\001\106\000\
\127\000\255\255\024\001\255\255\255\255\255\255\255\255\029\001\
\030\001\031\001\032\001\033\001\255\255\255\255\036\001\037\001\
\001\001\002\001\003\001\004\001\000\000\255\255\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\255\255\015\001\016\001\
\017\001\255\255\255\255\255\255\255\255\255\255\255\255\024\001\
\255\255\255\255\255\255\255\255\029\001\030\001\031\001\032\001\
\033\001\255\255\255\255\036\001\037\001\001\001\002\001\003\001\
\004\001\000\000\255\255\007\001\008\001\009\001\010\001\011\001\
\255\255\255\255\255\255\015\001\016\001\017\001\255\255\255\255\
\255\255\255\255\255\255\255\255\024\001\255\255\255\255\255\255\
\255\255\029\001\030\001\031\001\032\001\033\001\002\001\003\001\
\036\001\037\001\255\255\007\001\008\001\009\001\000\000\255\255\
\255\255\255\255\255\255\015\001\016\001\017\001\255\255\255\255\
\255\255\255\255\255\255\255\255\024\001\255\255\255\255\255\255\
\255\255\029\001\030\001\031\001\032\001\033\001\255\255\255\255\
\036\001\037\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\000\000\255\255\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\023\001\
\024\001\025\001\255\255\255\255\255\255\029\001\030\001\031\001\
\032\001\033\001\255\255\255\255\036\001\037\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\000\000\255\255\015\001\016\001\017\001\018\001\
\255\255\255\255\255\255\255\255\023\001\024\001\025\001\255\255\
\255\255\255\255\029\001\030\001\031\001\032\001\033\001\255\255\
\255\255\036\001\037\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\000\000\
\255\255\015\001\016\001\017\001\018\001\255\255\255\255\255\255\
\255\255\023\001\024\001\025\001\255\255\255\255\255\255\029\001\
\030\001\031\001\032\001\033\001\255\255\255\255\036\001\037\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\000\000\255\255\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\255\255\023\001\024\001\
\025\001\255\255\255\255\255\255\029\001\030\001\031\001\032\001\
\033\001\255\255\255\255\036\001\037\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\000\000\255\255\015\001\016\001\017\001\018\001\255\255\
\255\255\255\255\255\255\023\001\024\001\025\001\255\255\255\255\
\255\255\029\001\030\001\031\001\032\001\033\001\255\255\255\255\
\036\001\037\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\255\255\255\255\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\255\255\
\023\001\024\001\025\001\255\255\255\255\255\255\029\001\030\001\
\031\001\032\001\033\001\255\255\255\255\036\001\037\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\255\255\255\255\015\001\016\001\017\001\
\018\001\255\255\255\255\255\255\255\255\023\001\024\001\025\001\
\255\255\255\255\255\255\029\001\030\001\031\001\032\001\033\001\
\255\255\255\255\036\001\037\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\255\255\255\255\015\001\016\001\017\001\018\001\
\255\255\255\255\255\255\255\255\023\001\024\001\025\001\255\255\
\255\255\255\255\029\001\030\001\031\001\032\001\033\001\255\255\
\255\255\036\001\037\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\255\255\
\255\255\015\001\016\001\017\001\018\001\255\255\255\255\255\255\
\255\255\023\001\024\001\025\001\255\255\255\255\255\255\029\001\
\030\001\031\001\032\001\033\001\013\001\014\001\036\001\037\001\
\017\001\002\001\003\001\255\255\255\255\255\255\255\255\024\001\
\255\255\026\001\255\255\255\255\255\255\030\001\255\255\016\001\
\017\001\255\255\019\001\255\255\037\001\255\255\255\255\024\001\
\255\255\255\255\255\255\255\255\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\001\001\255\255\255\255\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\255\255\255\255\015\001\255\255\255\255\018\001\255\255\
\255\255\255\255\255\255\023\001\255\255\025\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\002\001\003\001\001\001\255\255\255\255\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\016\001\017\001\
\015\001\019\001\255\255\018\001\255\255\023\001\024\001\255\255\
\023\001\255\255\025\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\002\001\003\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\016\001\017\001\255\255\019\001\255\255\255\255\
\255\255\255\255\024\001\002\001\003\001\255\255\255\255\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\255\255\016\001\017\001\255\255\255\255\255\255\255\255\255\255\
\255\255\024\001\255\255\255\255\255\255\255\255\029\001\030\001\
\031\001\032\001\033\001\255\255\255\255\036\001\037\001"

let yynames_const = "\
  LAMBDA\000\
  TRUE\000\
  FALSE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  LET\000\
  LETREC\000\
  IN\000\
  BOOL\000\
  NAT\000\
  CONCAT\000\
  QUOTE\000\
  LPAREN\000\
  RPAREN\000\
  DOT\000\
  EQ\000\
  COLON\000\
  ARROW\000\
  EOF\000\
  COMMA\000\
  LCURL\000\
  RCURL\000\
  LIST\000\
  LSQR\000\
  RSQR\000\
  CONST\000\
  NIL\000\
  HEAD\000\
  TAIL\000\
  ISNIL\000\
  FIRST\000\
  SECOND\000\
  "

let yynames_block = "\
  INTV\000\
  STRINGV\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 56 "parser.mly"
        ( Bind (_1, _3) )
# 421 "parser.ml"
               : Lambda.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 58 "parser.mly"
        ( Eval _1 )
# 428 "parser.ml"
               : Lambda.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'appTerm) in
    Obj.repr(
# 62 "parser.mly"
      ( _1 )
# 435 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 64 "parser.mly"
      ( TmIf (_2, _4, _6) )
# 444 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 66 "parser.mly"
      ( TmAbs (_2, _4, _6) )
# 453 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 68 "parser.mly"
      ( TmLetIn (_2, _4, _6) )
# 462 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'ty) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 70 "parser.mly"
      ( TmLetIn (_2, TmFix ( TmAbs (_2, _4, _6)), _8) )
# 472 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 72 "parser.mly"
      ( TmConcat (_2,_3) )
# 480 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 76 "parser.mly"
      ( _1 )
# 487 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 78 "parser.mly"
      ( TmSucc _2 )
# 494 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 80 "parser.mly"
      ( TmPred _2 )
# 501 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 82 "parser.mly"
      ( TmIsZero _2 )
# 508 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'appTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 84 "parser.mly"
      ( TmApp (_1, _2) )
# 516 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'appTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'appTerm) in
    Obj.repr(
# 86 "parser.mly"
      ( TmConcat (_2,_3) )
# 524 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 90 "parser.mly"
      ( _2 )
# 531 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 92 "parser.mly"
      ( TmTrue )
# 537 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "parser.mly"
      ( TmFalse )
# 543 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 96 "parser.mly"
      ( TmVar _1 )
# 550 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 98 "parser.mly"
      ( let rec f = function
            0 -> TmZero
          | n -> TmSucc (f (n-1))
        in f _1 )
# 560 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 103 "parser.mly"
      ( TmStr _2 )
# 567 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'recordTerm) in
    Obj.repr(
# 105 "parser.mly"
      ( TmRecord _2 )
# 574 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pairTerm) in
    Obj.repr(
# 107 "parser.mly"
      ( _1 )
# 581 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'atomicTerm) in
    Obj.repr(
# 109 "parser.mly"
      ( TmFirst _1 )
# 588 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'atomicTerm) in
    Obj.repr(
# 111 "parser.mly"
      ( TmSecond _1 )
# 595 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atomicTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 113 "parser.mly"
      ( TmFindRecord (_1, _3) )
# 603 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'atomicTerm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 115 "parser.mly"
      ( TmConst (_3,_5,_6) )
# 612 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 117 "parser.mly"
      ( TmNil _3 )
# 619 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 119 "parser.mly"
      ( TmHead (_3,_5) )
# 627 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 121 "parser.mly"
      ( TmTail (_3,_5) )
# 635 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 123 "parser.mly"
      ( TmIsNil (_3,_5) )
# 643 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 128 "parser.mly"
      ( TmPair (_2,_4) )
# 651 "parser.ml"
               : 'pairTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 132 "parser.mly"
      ( [(_1,_3)] )
# 659 "parser.ml"
               : 'recordTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'recordTerm) in
    Obj.repr(
# 134 "parser.mly"
      ( (_1,_3)::_5 )
# 668 "parser.ml"
               : 'recordTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 138 "parser.mly"
      ( [_1] )
# 675 "parser.ml"
               : 'listTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'listTerm) in
    Obj.repr(
# 140 "parser.mly"
      ( _1::_3 )
# 683 "parser.ml"
               : 'listTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTy) in
    Obj.repr(
# 144 "parser.mly"
      ( _1 )
# 690 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atomicTy) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 146 "parser.mly"
      ( TyArr (_1, _3) )
# 698 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 150 "parser.mly"
      ( _2 )
# 705 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 152 "parser.mly"
      ( TyBool )
# 711 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 154 "parser.mly"
      ( TyNat )
# 717 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 156 "parser.mly"
      ( TyStr )
# 724 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'ty) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 158 "parser.mly"
      ( TyPair (_2,_4) )
# 732 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'recordTy) in
    Obj.repr(
# 160 "parser.mly"
      ( TyRecord _2 )
# 739 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 162 "parser.mly"
      ( TmList _2 )
# 746 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 164 "parser.mly"
      ( TmNil _2 )
# 753 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 172 "parser.mly"
      ( [(_1,_3)] )
# 761 "parser.ml"
               : 'recordTy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'recordTy) in
    Obj.repr(
# 174 "parser.mly"
      ( (_1,_3)::_5 )
# 770 "parser.ml"
               : 'recordTy))
(* Entry s *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let s (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Lambda.command)
