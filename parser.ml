type token =
  | LAMBDA
  | TRUE
  | FALSE
  | IF
  | THEN
  | ELSE
  | SUCC
  | PRED
  | ISZERO
  | LET
  | LETREC
  | IN
  | BOOL
  | NAT
  | CONCAT
  | QUOTE
  | LPAREN
  | RPAREN
  | DOT
  | EQ
  | COLON
  | ARROW
  | EOF
  | COMMA
  | LCURL
  | RCURL
  | FIRST
  | SECOND
  | INTV of (int)
  | STRINGV of (string)

open Parsing;;
let _ = parse_error;;
# 3 "parser.mly"
  open Lambda;;
# 38 "parser.ml"
let yytransl_const = [|
  257 (* LAMBDA *);
  258 (* TRUE *);
  259 (* FALSE *);
  260 (* IF *);
  261 (* THEN *);
  262 (* ELSE *);
  263 (* SUCC *);
  264 (* PRED *);
  265 (* ISZERO *);
  266 (* LET *);
  267 (* LETREC *);
  268 (* IN *);
  269 (* BOOL *);
  270 (* NAT *);
  271 (* CONCAT *);
  272 (* QUOTE *);
  273 (* LPAREN *);
  274 (* RPAREN *);
  275 (* DOT *);
  276 (* EQ *);
  277 (* COLON *);
  278 (* ARROW *);
    0 (* EOF *);
  279 (* COMMA *);
  280 (* LCURL *);
  281 (* RCURL *);
  282 (* FIRST *);
  283 (* SECOND *);
    0|]

let yytransl_block = [|
  284 (* INTV *);
  285 (* STRINGV *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\002\000\002\000\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\007\000\
\007\000\007\000\006\000\006\000\004\000\004\000\008\000\008\000\
\008\000\008\000\000\000"

let yylen = "\002\000\
\004\000\002\000\001\000\006\000\006\000\006\000\008\000\003\000\
\001\000\002\000\002\000\002\000\002\000\003\000\003\000\001\000\
\001\000\001\000\001\000\003\000\003\000\005\000\001\000\005\000\
\006\000\006\000\003\000\005\000\001\000\003\000\003\000\001\000\
\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\016\000\017\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\019\000\
\000\000\035\000\000\000\000\000\009\000\023\000\000\000\018\000\
\000\000\010\000\011\000\012\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\002\000\013\000\
\000\000\000\000\000\000\000\000\008\000\000\000\000\000\009\000\
\020\000\015\000\000\000\000\000\000\000\000\000\032\000\033\000\
\000\000\034\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\022\000\031\000\005\000\030\000\
\004\000\006\000\000\000\000\000\028\000\025\000\026\000\000\000\
\007\000"

let yydgoto = "\002\000\
\018\000\019\000\020\000\059\000\021\000\037\000\022\000\060\000"

let yysindex = "\004\000\
\076\255\000\000\249\254\000\000\000\000\105\255\073\255\073\255\
\073\255\250\254\251\254\105\255\255\254\105\255\134\255\000\000\
\009\255\000\000\014\000\073\255\000\000\000\000\010\255\000\000\
\028\255\000\000\000\000\000\000\019\255\020\255\105\255\152\255\
\027\255\026\255\030\255\035\255\037\255\105\255\000\000\000\000\
\040\255\105\255\105\255\040\255\000\000\152\255\073\255\000\000\
\000\000\000\000\105\255\105\255\044\255\051\000\000\000\000\000\
\040\255\000\000\046\255\049\255\066\255\062\255\061\255\152\255\
\065\255\069\255\070\255\000\000\077\255\105\255\040\255\105\255\
\105\255\105\255\074\255\241\254\000\000\000\000\000\000\000\000\
\000\000\000\000\086\255\030\255\000\000\000\000\000\000\105\255\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\047\000\000\000\000\000\073\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\255\
\000\000\000\000\032\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\096\000\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\255\000\000\000\000\000\000\000\000\
\085\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\030\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\250\255\006\000\225\255\251\255\036\000\000\000\000\000"

let yytablesize = 377
let yytable = "\025\000\
\021\000\026\000\027\000\028\000\001\000\031\000\003\000\034\000\
\036\000\003\000\086\000\087\000\063\000\039\000\040\000\003\000\
\003\000\032\000\029\000\029\000\029\000\023\000\029\000\030\000\
\045\000\069\000\048\000\033\000\038\000\024\000\041\000\054\000\
\042\000\018\000\018\000\061\000\062\000\047\000\043\000\080\000\
\044\000\040\000\049\000\050\000\065\000\066\000\018\000\018\000\
\018\000\051\000\068\000\064\000\055\000\056\000\018\000\018\000\
\057\000\052\000\048\000\018\000\018\000\053\000\067\000\079\000\
\070\000\081\000\082\000\083\000\058\000\047\000\071\000\072\000\
\003\000\073\000\004\000\005\000\003\000\004\000\005\000\006\000\
\074\000\089\000\007\000\008\000\009\000\010\000\011\000\075\000\
\013\000\014\000\012\000\013\000\014\000\076\000\078\000\014\000\
\015\000\088\000\077\000\015\000\016\000\024\000\084\000\016\000\
\017\000\003\000\004\000\005\000\006\000\027\000\085\000\007\000\
\008\000\009\000\010\000\011\000\000\000\000\000\000\000\012\000\
\013\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\
\015\000\000\000\000\000\000\000\016\000\024\000\003\000\004\000\
\005\000\006\000\000\000\000\000\007\000\008\000\009\000\010\000\
\011\000\000\000\000\000\000\000\012\000\013\000\014\000\000\000\
\000\000\004\000\005\000\000\000\000\000\015\000\007\000\008\000\
\009\000\016\000\035\000\000\000\000\000\000\000\046\000\013\000\
\014\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\
\000\000\000\000\000\000\016\000\024\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\000\000\000\000\021\000\
\021\000\021\000\021\000\000\000\000\000\000\000\000\000\021\000\
\021\000\021\000\000\000\000\000\021\000\021\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\000\000\000\000\024\000\024\000\024\000\024\000\
\018\000\018\000\000\000\000\000\024\000\024\000\024\000\000\000\
\000\000\024\000\024\000\000\000\000\000\000\000\018\000\018\000\
\000\000\000\000\000\000\000\000\000\000\000\000\018\000\000\000\
\000\000\003\000\018\000\018\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\000\000\000\000\003\000\
\000\000\000\000\003\000\000\000\000\000\000\000\000\000\003\000\
\014\000\003\000\000\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\000\000\000\000\014\000\000\000\
\000\000\014\000\000\000\000\000\000\000\000\000\014\000\000\000\
\014\000"

let yycheck = "\006\000\
\000\000\007\000\008\000\009\000\001\000\012\000\001\001\014\000\
\015\000\004\001\026\001\027\001\044\000\000\000\020\000\010\001\
\011\001\012\000\018\001\019\001\020\001\029\001\029\001\029\001\
\031\000\057\000\032\000\029\001\020\001\000\000\021\001\038\000\
\005\001\002\001\003\001\042\000\043\000\032\000\020\001\071\000\
\021\001\047\000\016\001\018\001\051\000\052\000\000\000\016\001\
\017\001\020\001\000\000\046\000\013\001\014\001\023\001\024\001\
\017\001\023\001\064\000\028\001\029\001\025\001\019\001\070\000\
\019\001\072\000\073\000\074\000\029\001\064\000\022\001\006\001\
\000\000\012\001\002\001\003\001\001\001\002\001\003\001\004\001\
\020\001\088\000\007\001\008\001\009\001\010\001\011\001\023\001\
\016\001\017\001\015\001\016\001\017\001\025\001\018\001\000\000\
\024\001\012\001\029\001\024\001\028\001\029\001\029\001\028\001\
\029\001\001\001\002\001\003\001\004\001\025\001\075\000\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\255\255\015\001\
\016\001\017\001\255\255\255\255\255\255\255\255\255\255\255\255\
\024\001\255\255\255\255\255\255\028\001\029\001\001\001\002\001\
\003\001\004\001\255\255\255\255\007\001\008\001\009\001\010\001\
\011\001\255\255\255\255\255\255\015\001\016\001\017\001\255\255\
\255\255\002\001\003\001\255\255\255\255\024\001\007\001\008\001\
\009\001\028\001\029\001\255\255\255\255\255\255\015\001\016\001\
\017\001\255\255\255\255\255\255\255\255\255\255\255\255\024\001\
\255\255\255\255\255\255\028\001\029\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\255\255\255\255\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\023\001\
\024\001\025\001\255\255\255\255\028\001\029\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\255\255\255\255\015\001\016\001\017\001\018\001\
\002\001\003\001\255\255\255\255\023\001\024\001\025\001\255\255\
\255\255\028\001\029\001\255\255\255\255\255\255\016\001\017\001\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\255\255\
\255\255\001\001\028\001\029\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\255\255\255\255\015\001\
\255\255\255\255\018\001\255\255\255\255\255\255\255\255\023\001\
\001\001\025\001\255\255\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\255\255\255\255\015\001\255\255\
\255\255\018\001\255\255\255\255\255\255\255\255\023\001\255\255\
\025\001"

let yynames_const = "\
  LAMBDA\000\
  TRUE\000\
  FALSE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  LET\000\
  LETREC\000\
  IN\000\
  BOOL\000\
  NAT\000\
  CONCAT\000\
  QUOTE\000\
  LPAREN\000\
  RPAREN\000\
  DOT\000\
  EQ\000\
  COLON\000\
  ARROW\000\
  EOF\000\
  COMMA\000\
  LCURL\000\
  RCURL\000\
  FIRST\000\
  SECOND\000\
  "

let yynames_block = "\
  INTV\000\
  STRINGV\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 46 "parser.mly"
        ( Bind (_1, _3) )
# 282 "parser.ml"
               : Lambda.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 48 "parser.mly"
        ( Eval _1 )
# 289 "parser.ml"
               : Lambda.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'appTerm) in
    Obj.repr(
# 52 "parser.mly"
      ( _1 )
# 296 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 54 "parser.mly"
      ( TmIf (_2, _4, _6) )
# 305 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 56 "parser.mly"
      ( TmAbs (_2, _4, _6) )
# 314 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 58 "parser.mly"
      ( TmLetIn (_2, _4, _6) )
# 323 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'ty) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 60 "parser.mly"
      ( TmLetIn (_2, TmFix ( TmAbs (_2, _4, _6)), _8) )
# 333 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 62 "parser.mly"
      ( TmConcat (_2,_3) )
# 341 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 66 "parser.mly"
      ( _1 )
# 348 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 68 "parser.mly"
      ( TmSucc _2 )
# 355 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 70 "parser.mly"
      ( TmPred _2 )
# 362 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 72 "parser.mly"
      ( TmIsZero _2 )
# 369 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'appTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 74 "parser.mly"
      ( TmApp (_1, _2) )
# 377 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'appTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'appTerm) in
    Obj.repr(
# 76 "parser.mly"
      ( TmConcat (_2,_3) )
# 385 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 80 "parser.mly"
      ( _2 )
# 392 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
      ( TmTrue )
# 398 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "parser.mly"
      ( TmFalse )
# 404 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 86 "parser.mly"
      ( TmVar _1 )
# 411 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 88 "parser.mly"
      ( let rec f = function
            0 -> TmZero
          | n -> TmSucc (f (n-1))
        in f _1 )
# 421 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 93 "parser.mly"
      ( TmStr _2 )
# 428 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'recordTerm) in
    Obj.repr(
# 95 "parser.mly"
      ( TmRecord _2 )
# 435 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'recordTerm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 97 "parser.mly"
      ( TmFindRecord (_2, _5) )
# 443 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pairTerm) in
    Obj.repr(
# 99 "parser.mly"
      ( _1 )
# 450 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 104 "parser.mly"
      ( TmPair (_2,_4) )
# 458 "parser.ml"
               : 'pairTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    Obj.repr(
# 106 "parser.mly"
      ( TmFirst (_2,_4) )
# 466 "parser.ml"
               : 'pairTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    Obj.repr(
# 108 "parser.mly"
      ( TmSecond (_2,_4) )
# 474 "parser.ml"
               : 'pairTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 112 "parser.mly"
      ( [(_1,_3)] )
# 482 "parser.ml"
               : 'recordTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'recordTerm) in
    Obj.repr(
# 114 "parser.mly"
      ( (_1,_3)::_5 )
# 491 "parser.ml"
               : 'recordTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTy) in
    Obj.repr(
# 118 "parser.mly"
      ( _1 )
# 498 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atomicTy) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 120 "parser.mly"
      ( TyArr (_1, _3) )
# 506 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 124 "parser.mly"
      ( _2 )
# 513 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 126 "parser.mly"
      ( TyBool )
# 519 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 128 "parser.mly"
      ( TyNat )
# 525 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 130 "parser.mly"
      ( TyStr )
# 532 "parser.ml"
               : 'atomicTy))
(* Entry s *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let s (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Lambda.command)
